let mapleader=","                           " set leader to, (Comma)

" Utils {{{
" Function to echo during sourcing the vimrc without interrupting the user
function! EchoNoLoadPrompt(highlighting, message)
    if v:vim_did_enter
        exec 'echohl ' . a:highlighting
        echomsg a:message
        echohl NONE
    else
        augroup vimrcEchos
            exec 'autocmd VimEnter * echohl ' . a:highlighting . ' | echomsg ' . string(a:message) . ' | echohl NONE'
        augroup END
    endif
endfunction
" }}}

" Mappings {{{
" How to find a mapping that doesn't conflict with anything:
" Useful commands:
"   :map  " To make these command searchable consider :redir! > file.txt and
"           :redir! END afterwards
"   :map!
"   :help map-which-keys
"   :help $KEY<c-D> " Note that this command needs the key in ^(for
"   control) Key syntax.
"   :mapcheck " Look into help of this command
"   This is a tldr of
"   https://stackoverflow.com/questions/2483849/detect-if-a-key-is-bound-to-something-in-vim

noremap <silent> <leader>ev :e $MYVIMRC<cr>  " open .vimrc with <leader>ev
noremap <silent> <leader>sv :so $MYVIMRC<cr>  " open .vimrc with <leader>sv

set mouse=a  " enable mouse control

" Support indenting multiple times in visual mode
vnoremap < <gv
vnoremap > >gv

" move in wrapped line as if they were separate
nnoremap gk k
nnoremap gj j
vnoremap gk k
vnoremap gj j

nnoremap k gk
nnoremap j gj
vnoremap k gk
vnoremap j gj

" scroll 3 lines instead of one
nnoremap <C-Y> 3<C-Y>
nnoremap <C-E> 3<C-E>

" scroll only 5 line on fast scolling with <C-D/U>
set scroll=5

" scroll 10 cols instead of one
nnoremap zh 10zh
nnoremap zl 10zl

" Prevent <c-u> from deleting line without undo possibility
inoremap <c-u> <c-g>u<c-u>
inoremap <c-w> <c-g>u<c-w>

" scroll 3 lines instead of one
nnoremap <C-n> :bn<cr>
nnoremap <C-p> :bp<cr>

noremap <leader><space> :nohlsearch<cr><leader><space>     " turn off search highlight
nnoremap <silent><leader>w :%s/\s\+$//<cr>  " delete all trailing whitespace"

nnoremap <F5> :w<cr>:make<cr>                              " at F5 to run make

nnoremap <leader>cwd :lcd %:p:h<cr>:lcd<cr>                 " change working directory to current file
nnoremap <leader>or :browse oldfiles<cr>                    " browse recently used files

if has("win32")
    " Map use of clipboard for easior use on windows
    nnoremap Y "*y
    vnoremap Y "*y
    " Not for P since it has an usefull meaning
else
    " Map use of clipboard for easier use on linux
    nnoremap Y "+y
    vnoremap Y "+y
endif

" Show diff between current buffer content and file
" Copied from https://vim.fandom.com/wiki/Diff_current_buffer_and_the_original_file
" TODO look into the more complex methods described above
com! WDiff w !diff % -
" }}}
" Options {{{
" Prevent vim from playing an error sound and flashing the screen
set noerrorbells 	" Only play error bells on error with no error text
set visualbell		" Only flash the screen on such errors
set t_vb=		" Flash screen with no color -> don't flash screen
" Do the above on initialising the GUI because it could be reset by entering the GUI
augroup Bells
    au!
    autocmd GUIEnter * set visualbell t_vb=
augroup END

" Set Fontsize to 11 in GUI
if has('gui_running')
  set guifont=:h11
endif

" save as sudo
cmap w!! w !sudo tee > /dev/null %

" save temporary files not in current directory but there
set backupdir=$HOME/.vim/backup//
set directory=$HOME/.vim/tmp//

set encoding=utf-8                          " force utf8 support
set t_Co=256                                " Use 256 colors
set showmatch                               " highlight matching braces/parentheses/brackets
set cursorline                              " highlight current line
set modelines=1                             " last line of this file applies to just this file
set laststatus=2                            " Always show status line not only on split windows
set autoindent
set ruler                                   " show line and column number
set display=lastline,uhex                   " show non printable as hex and long last line
set splitbelow                              " new splits on the right and on the bottom
set splitright                              " more intuitive for LTR languages
set relativenumber                          " show relative line numbers
set number                                  " but absolute of current line
set ignorecase                              " make search case insensitive
set smartcase                               " Case insensitive searches become sensitive with capitals
set hlsearch                                " highlight matches
set incsearch                               " Jump to first match while typing
set shortmess-=S                            " Display count of match while searching
set shiftwidth=4 tabstop=8 softtabstop=4    " Make a tab only 4 instead of 8 spaces
set expandtab                               " insert spaces when pressing tab
set foldmethod=syntax                       " Make it possible to fold lines with comments
set foldlevel=99 foldlevelstart=99          " open most folds by default
set backspace=indent,start                  " allow backspace to work even over the start of the insert and automaticall added indents Let eol out of it to don't allow it to work over line breals
set updatetime=1000                         " Time to trigger Keyhold Event (Also updates tagbar)
set completeopt=preview,menuone,longest     " Only insert the longest common part of the complete options

set wildmenu                                " visual autocomplete for command menu
set wildmode=longest:full,list:full         " autocomplete first match and show list

set hidden                                  " Allow abandoned buffers. (https://stackoverflow.com/questions/21331664/how-to-show-tab-close-button-in-gvim/21338192#21338192)
set switchbuf=useopen,usetab

" Change cursor when changing between modes
"let &t_SR = "\e[4 q"
let &t_SI = "\e[6 q"                        " Bar on entering insert mode
let &t_EI = "\e[2 q"                        " Block on leaving insert mode
" }}}

let g:vimrc_directory=$HOME . "/.vim/vimrc.d/"
function! s:source_vimrc_d_file(file)
    if filereadable(g:vimrc_directory . a:file)
        exec "source" . g:vimrc_directory . a:file
    else
        echoerr "Couldn't load: " . g:vimrc_directory . a:file
    end
endfunction

call s:source_vimrc_d_file("spell_check.vim")
call s:source_vimrc_d_file("whitespace.vim")
call s:source_vimrc_d_file("highlighting.vim")
" Plugins {{{
call s:source_vimrc_d_file("plugins.vim")
" Because Plug is behaving strangely and is not sourcing the plugin right away
augroup source_coc_nvim
    autocmd!
    autocmd VimEnter * call s:source_vimrc_d_file("coc.nvim.vim")
augroup end

if !exists("g:loaded_tmux_navigator")
    " Move the same as in tmux with Vi bindings
    nnoremap <C-h> <C-w>h
    nnoremap <C-j> <C-w>j
    nnoremap <C-k> <C-w>k
    nnoremap <C-l> <C-w>l
endif
" }}}
if filereadable(g:vimrc_directory . "c_dev.vim")
    exec "source" . g:vimrc_directory . "c_dev.vim"
end
" FIle Format dependend {{{
let g:tex_fold_enabled=1
" }}}
" Highlighting and color scheme {{{
syntax on                                   " syntax highlighting

colorscheme solarized  " placed at ~/vimfiles/colors/solarized.vim for windows
set background=light

" Small command to debug syntax highlighting http://vim.wikia.com/wiki/Identify_the_syntax_highlighting_group_used_at_the_cursor
map <leader>hi :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' .synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
" }}}

" vim: foldmethod=marker
