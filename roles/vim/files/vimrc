let mapleader=","                           " set leader to, (Comma)

" Mapings {{{
noremap <silent> <leader>ev :e $MYVIMRC<cr>  " open .vimrc with <leader>ev
noremap <silent> <leader>sv :so $MYVIMRC<cr>  " open .vimrc with <leader>sv

set mouse=a  " enable mouse control

" Support indenting multiple times in visual mode
vnoremap < <gv
vnoremap > >gv

" move in wrapped line as if they were separate
nnoremap gk k
nnoremap gj j
vnoremap gk k
vnoremap gj j

nnoremap k gk
nnoremap j gj
vnoremap k gk
vnoremap j gj

" scroll 3 lines instead of one
nnoremap <C-Y> 3<C-Y>
nnoremap <C-E> 3<C-E>

" scroll only 5 line on fast scolling with <C-D/U>
set scroll=5

" scroll 10 cols instead of one
nnoremap zh 10zh
nnoremap zl 10zl

" Prevent <c-u> from deleting line without undo possibility
inoremap <c-u> <c-g>u<c-u>
inoremap <c-w> <c-g>u<c-w>

noremap <leader><space> :nohlsearch<cr><leader><space>     " turn off search highlight
nnoremap <silent><leader>w :%s/\s\+$//<cr>  " delete all trailing whitespace"

nnoremap <F5> :w<cr>:make<cr>                              " at F5 to run make

nnoremap <leader>cwd :lcd %:p:h<cr>:lcd<cr>                 " change working directory to current file
nnoremap <leader>or :browse oldfiles<cr>                    " browse recently used files

" Spell checking
" set spellcapcheck  "[.?!]\_[\])'" \t]\+")                    " checks if the first word of the sentence is big
" set spell language to english by default press ,no to disable
setlocal spell spelllang=en
nnoremap <leader>de :setlocal spell spelllang=de<cr>:set spellcapcheck<cr>       " add Spellcheck for German
nnoremap <leader>en :setlocal spell spelllang=en<cr>:set spellcapcheck<cr>       " add Spellcheck for English
nnoremap <leader>no :set nospell<cr>						" remove spellchecking

if has("win32")

    " Map use of clipboard for easior use on windows
    nnoremap Y "*y
    vnoremap Y "*y
    " Not for P since it has an usefull meaning
else
    " Map use of clipboard for easier use on linux
    nnoremap Y "+y
    vnoremap Y "+y
endif

nnoremap <silent> <leader>hc :call ClearAllHighlightWord()<cr>
nnoremap <silent> <leader>1 :call HighlightWord(1)<cr>
nnoremap <silent> <leader>2 :call HighlightWord(2)<cr>
nnoremap <silent> <leader>3 :call HighlightWord(3)<cr>
nnoremap <silent> <leader>4 :call HighlightWord(4)<cr>
nnoremap <silent> <leader>5 :call HighlightWord(5)<cr>
" }}}
" Options {{{
" Prevent vim from playing an error sound and flashing the screen
set noerrorbells 	" Only play error bells on error with no error text
set visualbell		" Only flash the screen on such errors
set t_vb=		" Flash screen with no color -> don't flash screen
if has('autocmd')	" Do the above on initialising the GUI because it could be reset by entering the GUI
  autocmd GUIEnter * set visualbell t_vb=
endif

" Set Fontsize to 11 in GUI
if has('gui_running')
  set guifont=:h11
endif

" save as sudo
cmap w!! w !sudo tee > /dev/null %

" save temporary files not in current directory but there
set backupdir=$HOME/.vim/backup//
set directory=$HOME/.vim/tmp//

set encoding=utf-8                          " force utf8 support
set t_Co=256                                " Use 256 colors
set showmatch                               " highlight matching braces/parentheses/brackets
set cursorline                              " highlight current line
set modelines=1                             " last line of this file applies to just this file
set laststatus=2                            " Always show status line not only on split windows
set autoindent
set ruler                                   " show line and column number
set display=lastline,uhex                   " show non printable as hex and long last line
set splitbelow                              " new splits on the right and on the bottom
set splitright                              " more intuitive for LTR languages
set relativenumber                          " show relative line numbers
set number                                  " but absolute of current line
set ignorecase                              " make search case insensitive
set smartcase                               " Case insensitive searches become sensitive with capitals
set hlsearch                                " highlight matches
set shiftwidth=4 tabstop=4 softtabstop=4    " Make a tab only 4 instead of 8 spaces
set expandtab                               " insert spaces when pressing tab
set foldmethod=syntax                       " Make it possible to fold lines with comments
set foldlevel=99 foldlevelstart=99          " open most folds by default
set backspace=indent,start                  " allow backspace to work even over the start of the insert and automaticall added indents Let eol out of it to don't allow it to work over line breals

set wildmenu                                " visual autocomplete for command menu
set wildmode=list:full                      " autocomplete first match and show list

" Change cursor when changing between modes
"let &t_SR = "\e[4 q"
let &t_SI = "\e[6 q"                        " Bar on entering insert mode
let &t_EI = "\e[2 q"                        " Block on leaving insert mode
" }}}
" Functions {{{
function! HighlightWord(n)
    let mid = 7890 + a:n
    try
        call matchdelete(mid) " When match exists just delete it
    catch 'E803' " When matchid does not exist yet it will be toggled on
        " Match only complete word under the cursor
        let pat = '\V\<' . expand('<cword>') . '\>'
        call matchadd("WordHighlight" . a:n, pat, 10, mid)
    endtry
endfunction

function! ClearAllHighlightWord()
    for i in range(1,5)
        silent! call matchdelete(7890 + i)
    endfor
endfunction
" }}}
" Plugins {{{
call plug#begin('~/vimfiles/bundle')

" surround with parentheses, braces, ...
Plug 'tpope/vim-surround'

" repeat advanced plugin commands with .
Plug 'tpope/vim-repeat'

" Automatically insert closing parentheses, brackets, etc.
Plug 'jiangmiao/auto-pairs'

" Allow movement integration with tmux
Plug 'christoomey/vim-tmux-navigator'
let g:tmux_navigator_disable_when_zoomed = 1

" Snippets
Plug 'SirVer/ultisnips'
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-h>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" Snippets are separated from the engine
Plug 'honza/vim-snippets'

set runtimepath+=~/dotfiles/vim/snippets/

" klen/python-mode
" scrooloose/syntastic
" Valloric/YouCompleteMe
" matjutsushi/tagbar

Plug 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
let g:Powerline_symbols = 'fanxy'

" show git diff +, -, ~ at the left edge
Plug 'airblade/vim-gitgutter'

" Latex syntax highlighting and completion
Plug 'lervag/vimtex'

call plug#end()

" Plugins dependent {{{
if !exists("g:loaded_tmux_navigator")
    " Move the same as in tmux with Vi bindings
    nnoremap <C-h> <C-w>h
    nnoremap <C-j> <C-w>j
    nnoremap <C-k> <C-w>k
    nnoremap <C-l> <C-w>l
endif

" }}}
" }}}
" FIle Format dependend {{{
autocmd FileType tex let g:tex_fold_enabled=1
autocmd FileType fish set syntay=shell
" }}}
" C C++ cscope ctags mappings{{{
if has("cscope")

    set cscopetag                   " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
    set csto=0                      " check cscope for definition of a symbol before checking ctags

    " add any cscope database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
    " else add the database pointed to by environment variable
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif

    set cscopeverbose               " show msg when any other cscope db added

    " See :h cscope-suggestions for explanations
    nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>

    " Do horizontal split for search
    nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>


    " Do a vertical split for search
    nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>
endif
" }}}
" Highlighting and color scheme {{{
syntax on                                   " syntax highlighting
" Match syntax groups for trailing whitespace and tabs in the file
syntax match EvilTabs containedin=ALL /\t/ display
syntax match ExtraWhitespace containedin=ALL /\s\+\%#\@<!$/ display
" Ensure that after reading a syntax this gets set again as it sees to be cleared for
" a new file type. If there is a way to have a syntax file for all file types
" this should be set there.
autocmd Syntax * syntax match EvilTabs containedin=ALL /\t/ display
autocmd Syntax * syntax match ExtraWhitespace containedin=ALL /\s\+\%#\@<!$/ display

colorscheme solarized  " placed at ~/vimfiles/colors/solarized.vim for windows
set background=light

" Change Spellcheck highlighting to be visible on every console
"hi! link SpellBad ErrorMsg
"hi! link SpellCap Search
highlight SpellBad cterm=underline term=underline ctermbg=Red
highlight SpellCap ctermbg=Red
" highlight the custom groups
highlight EvilTabs ctermbg=red guibg=red
highlight ExtraWhitespace ctermbg=red guibg=red
hi def WordHighlight1 ctermbg=2
hi def WordHighlight2 ctermbg=6
hi def WordHighlight3 ctermbg=12
hi def WordHighlight4 ctermbg=9
hi def WordHighlight5 ctermbg=13
" Small command to debug syntax highlighting http://vim.wikia.com/wiki/Identify_the_syntax_highlighting_group_used_at_the_cursor
map <leader>hi :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' .synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
" }}}

" vim: foldmethod=marker
